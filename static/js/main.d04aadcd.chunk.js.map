{"version":3,"sources":["components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","Scroll","props","style","overflowY","height","children","SearchBox","searchChange","className","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","fontFamily","color","Component","App","onSearchChange","event","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OA6BeA,EA1BE,SAAC,GAAa,EAAZC,OAEX,MAAM,IAAIC,MAAM,WCKTC,EARA,SAACC,GACZ,OACA,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,UAClCH,EAAMI,WCMAC,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,OACf,2BAAOA,UAAU,mCAAmCC,KAAK,SAASC,YAAY,gBAC9EC,SAAUJ,MCqBHK,E,YAxBX,WAAYX,GAAO,IAAD,8BACd,4CAAMA,KACDY,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SAEN,kBAAC,WAAD,KACA,2DACA,uBAAGZ,MAAO,CAACiB,WAAW,iBAAiBC,MAAM,WAA7C,4BAIDH,KAAKhB,MAAMI,a,GArBEgB,aCkDbC,G,kBA5CX,aAAc,IAAD,8BACT,+CAcJC,eAAiB,SAACC,GACd,EAAKN,SAAS,CAACO,YAAYD,EAAME,OAAOC,SAdxC,EAAKd,MAAQ,CACbf,OAAQ,GACR2B,YAAa,IAJJ,E,iFASO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAACpB,OAAOkC,S,+BAQ/B,IAAD,EACwBf,KAAKJ,MAA3Bf,EADF,EACEA,OAAO2B,EADT,EACSA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GAC/B,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAEzD,OAAsB,IAAlBvC,EAAOyC,OACA,wBAAI/B,UAAU,MAAd,cAIX,yBAAKA,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcU,KAAKM,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQmC,W,GApCZO,IAAMnB,Y,MCKJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.d04aadcd.chunk.js","sourcesContent":["import React,{Fragment} from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    if(true){\n        throw new Error('Noooo!');\n    }\n    return (\n        <Fragment>\n            {\n            robots.map((user,i)=>{\n            return <Card key={robots[i].id}\n                    id={robots[i].id}\n                    name={robots[i].name}\n                    email={robots[i].email}\n                    />\n        \n            })\n            }\n        </Fragment>\n           \n            //  <Fragment>\n            //     <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n            //     <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n            //     <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n            // </Fragment>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n    <div style={{overflowY:'scroll',height:'500px'}}>\n        {props.children}\n    </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n        <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" \n        onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React,{Component, Fragment} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return (\n                <Fragment>\n                <h1>Oops, Something went wrong!</h1>\n                <p style={{fontFamily:'SEGA LOGO FONT',color:'orange'}}>Please check back later</p>\n                </Fragment>\n            )\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from \"react\";\nimport CardList from \"../components/CardList\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n        robots: [],\n        searchField: \"\"\n        }\n  \n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then(users => this.setState({robots:users}) )\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField:event.target.value})\n      \n    }\n\n    render (){\n        const {robots,searchField} = this.state;\n      const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        if (robots.length === 0){\n            return <h1 className=\"tc\">Loading...</h1>\n        }else {\n\n        return (\n        <div className=\"tc\">\n        <h1 className=\"f2\">Robofriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n        <ErrorBoundary>\n            <CardList robots={filteredRobots}/>\n        </ErrorBoundary>\n        </Scroll>\n        </div>\n    )\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}